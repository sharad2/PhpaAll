#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eclipse.PhpaLibrary.Database.Payroll
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PHPA2Fortest")]
	public partial class PayrollDataContext : Eclipse.PhpaLibrary.Database.DataContextBase
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertAdjustment(Adjustment instance);
    partial void UpdateAdjustment(Adjustment instance);
    partial void DeleteAdjustment(Adjustment instance);
    partial void InsertEmployeeAdjustment(EmployeeAdjustment instance);
    partial void UpdateEmployeeAdjustment(EmployeeAdjustment instance);
    partial void DeleteEmployeeAdjustment(EmployeeAdjustment instance);
    partial void InsertSalaryPeriod(SalaryPeriod instance);
    partial void UpdateSalaryPeriod(SalaryPeriod instance);
    partial void DeleteSalaryPeriod(SalaryPeriod instance);
    partial void InsertHeadOfAccount(HeadOfAccount instance);
    partial void UpdateHeadOfAccount(HeadOfAccount instance);
    partial void DeleteHeadOfAccount(HeadOfAccount instance);
    partial void InsertPeriodEmployeeAdjustment(PeriodEmployeeAdjustment instance);
    partial void UpdatePeriodEmployeeAdjustment(PeriodEmployeeAdjustment instance);
    partial void DeletePeriodEmployeeAdjustment(PeriodEmployeeAdjustment instance);
    partial void InsertEmployeePeriod(EmployeePeriod instance);
    partial void UpdateEmployeePeriod(EmployeePeriod instance);
    partial void DeleteEmployeePeriod(EmployeePeriod instance);
    partial void InsertEmployeeType(EmployeeType instance);
    partial void UpdateEmployeeType(EmployeeType instance);
    partial void DeleteEmployeeType(EmployeeType instance);
    partial void InsertReportCategory(ReportCategory instance);
    partial void UpdateReportCategory(ReportCategory instance);
    partial void DeleteReportCategory(ReportCategory instance);
    partial void InsertAdjustmentCategory(AdjustmentCategory instance);
    partial void UpdateAdjustmentCategory(AdjustmentCategory instance);
    partial void DeleteAdjustmentCategory(AdjustmentCategory instance);
    partial void InsertMaritalStatus(MaritalStatus instance);
    partial void UpdateMaritalStatus(MaritalStatus instance);
    partial void DeleteMaritalStatus(MaritalStatus instance);
    partial void InsertServicePeriod(ServicePeriod instance);
    partial void UpdateServicePeriod(ServicePeriod instance);
    partial void DeleteServicePeriod(ServicePeriod instance);
    partial void InsertStation(Station instance);
    partial void UpdateStation(Station instance);
    partial void DeleteStation(Station instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    #endregion
		
		public PayrollDataContext() : 
				base(global::Eclipse.PhpaLibrary.Properties.Settings.Default.PHPA2FortestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PayrollDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PayrollDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PayrollDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PayrollDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<Adjustment> Adjustments
		{
			get
			{
				return this.GetTable<Adjustment>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeAdjustment> EmployeeAdjustments
		{
			get
			{
				return this.GetTable<EmployeeAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<SalaryPeriod> SalaryPeriods
		{
			get
			{
				return this.GetTable<SalaryPeriod>();
			}
		}
		
		public System.Data.Linq.Table<HeadOfAccount> HeadOfAccounts
		{
			get
			{
				return this.GetTable<HeadOfAccount>();
			}
		}
		
		public System.Data.Linq.Table<PeriodEmployeeAdjustment> PeriodEmployeeAdjustments
		{
			get
			{
				return this.GetTable<PeriodEmployeeAdjustment>();
			}
		}
		
		public System.Data.Linq.Table<EmployeePeriod> EmployeePeriods
		{
			get
			{
				return this.GetTable<EmployeePeriod>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeType> EmployeeTypes
		{
			get
			{
				return this.GetTable<EmployeeType>();
			}
		}
		
		public System.Data.Linq.Table<ReportCategory> ReportCategories
		{
			get
			{
				return this.GetTable<ReportCategory>();
			}
		}
		
		public System.Data.Linq.Table<AdjustmentCategory> AdjustmentCategories
		{
			get
			{
				return this.GetTable<AdjustmentCategory>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatus> MaritalStatus
		{
			get
			{
				return this.GetTable<MaritalStatus>();
			}
		}
		
		public System.Data.Linq.Table<ServicePeriod> ServicePeriods
		{
			get
			{
				return this.GetTable<ServicePeriod>();
			}
		}
		
		public System.Data.Linq.Table<Station> Stations
		{
			get
			{
				return this.GetTable<Station>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private bool _IsForeigner;
		
		private System.Nullable<int> _EmployeeTypeId;
		
		private string _EmployeeCode;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _JoiningDate;
		
		private string _Designation = default(string);
		
		private System.Nullable<int> _DivisionId;
		
		private string _CitizenCardNo;
		
		private System.Nullable<decimal> _BasicSalary;
		
		private string _HomeTown;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Data.Linq.Binary _Version;
		
		private string _ModifiedWorkstation;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _GISAccountNumber;
		
		private string _Tpn;
		
		private string _ParentOrganization;
		
		private string _GPFNo;
		
		private string _BankAccountNo;
		
		private string _Gender;
		
		private string _BDFCAccountNo;
		
		private string _BankLoanAccountNo;
		
		private string _NPPFPNo;
		
		private string _BankName;
		
		private string _BankPlace;
		
		private string _GISGroup;
		
		private System.Nullable<int> _MaritalStatusId;
		
		private System.Nullable<int> _Grade;
		
		private System.Nullable<System.DateTime> _DateOfRelieve;
		
		private string _NPPFType;
		
		private int _StationId;
		
		private System.Nullable<int> _BankId;
		
		private EntitySet<EmployeeAdjustment> _EmployeeAdjustments;
		
		private EntitySet<EmployeePeriod> _EmployeePeriods;
		
		private EntitySet<ServicePeriod> _ServicePeriods;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<EmployeeType> _EmployeeType;
		
		private EntityRef<MaritalStatus> _MaritalStatus;
		
		private EntityRef<Station> _Station;
		
		private EntityRef<Bank> _Bank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnIsBhutaneseChanging(bool value);
    partial void OnIsBhutaneseChanged();
    partial void OnEmployeeTypeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeTypeIdChanged();
    partial void OnEmployeeCodeChanging(string value);
    partial void OnEmployeeCodeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnJoiningDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJoiningDateChanged();
    partial void OnDivisionIdChanging(System.Nullable<int> value);
    partial void OnDivisionIdChanged();
    partial void OnCitizenCardNoChanging(string value);
    partial void OnCitizenCardNoChanged();
    partial void OnBasicSalaryChanging(System.Nullable<decimal> value);
    partial void OnBasicSalaryChanged();
    partial void OnHomeTownChanging(string value);
    partial void OnHomeTownChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGISAccountNumberChanging(string value);
    partial void OnGISAccountNumberChanged();
    partial void OnTpnChanging(string value);
    partial void OnTpnChanged();
    partial void OnParentOrganizationChanging(string value);
    partial void OnParentOrganizationChanged();
    partial void OnGPFAccountNoChanging(string value);
    partial void OnGPFAccountNoChanged();
    partial void OnBankAccountNoChanging(string value);
    partial void OnBankAccountNoChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBDFCAccountNoChanging(string value);
    partial void OnBDFCAccountNoChanged();
    partial void OnBankLoanAccountNoChanging(string value);
    partial void OnBankLoanAccountNoChanged();
    partial void OnNPPFPNoChanging(string value);
    partial void OnNPPFPNoChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBankPlaceChanging(string value);
    partial void OnBankPlaceChanged();
    partial void OnGISGroupChanging(string value);
    partial void OnGISGroupChanged();
    partial void OnMaritalStatusIdChanging(System.Nullable<int> value);
    partial void OnMaritalStatusIdChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    partial void OnDateOfRelieveChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfRelieveChanged();
    partial void OnNPPFTypeChanging(string value);
    partial void OnNPPFTypeChanged();
    partial void OnStationIdChanging(int value);
    partial void OnStationIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeAdjustments = new EntitySet<EmployeeAdjustment>(new Action<EmployeeAdjustment>(this.attach_EmployeeAdjustments), new Action<EmployeeAdjustment>(this.detach_EmployeeAdjustments));
			this._EmployeePeriods = new EntitySet<EmployeePeriod>(new Action<EmployeePeriod>(this.attach_EmployeePeriods), new Action<EmployeePeriod>(this.detach_EmployeePeriods));
			this._ServicePeriods = new EntitySet<ServicePeriod>(new Action<ServicePeriod>(this.attach_ServicePeriods), new Action<ServicePeriod>(this.detach_ServicePeriods));
			this._Division = default(EntityRef<Division>);
			this._EmployeeType = default(EntityRef<EmployeeType>);
			this._MaritalStatus = default(EntityRef<MaritalStatus>);
			this._Station = default(EntityRef<Station>);
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForeigner", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsBhutanese
		{
			get
			{
				return this._IsForeigner;
			}
			set
			{
				if ((this._IsForeigner != value))
				{
					this.OnIsBhutaneseChanging(value);
					this.SendPropertyChanging();
					this._IsForeigner = value;
					this.SendPropertyChanged("IsBhutanese");
					this.OnIsBhutaneseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeTypeId
		{
			get
			{
				return this._EmployeeTypeId;
			}
			set
			{
				if ((this._EmployeeTypeId != value))
				{
					if (this._EmployeeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeId = value;
					this.SendPropertyChanged("EmployeeTypeId");
					this.OnEmployeeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeCode", DbType="NVarChar(50) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public string EmployeeCode
		{
			get
			{
				return this._EmployeeCode;
			}
			set
			{
				if ((this._EmployeeCode != value))
				{
					this.OnEmployeeCodeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeCode = value;
					this.SendPropertyChanged("EmployeeCode");
					this.OnEmployeeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoiningDate", DbType="SmallDateTime ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> JoiningDate
		{
			get
			{
				return this._JoiningDate;
			}
			set
			{
				if ((this._JoiningDate != value))
				{
					this.OnJoiningDateChanging(value);
					this.SendPropertyChanging();
					this._JoiningDate = value;
					this.SendPropertyChanged("JoiningDate");
					this.OnJoiningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DivisionId
		{
			get
			{
				return this._DivisionId;
			}
			set
			{
				if ((this._DivisionId != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionId = value;
					this.SendPropertyChanged("DivisionId");
					this.OnDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenCardNo", DbType="NVarChar(60)", UpdateCheck=UpdateCheck.Never)]
		public string CitizenCardNo
		{
			get
			{
				return this._CitizenCardNo;
			}
			set
			{
				if ((this._CitizenCardNo != value))
				{
					this.OnCitizenCardNoChanging(value);
					this.SendPropertyChanging();
					this._CitizenCardNo = value;
					this.SendPropertyChanged("CitizenCardNo");
					this.OnCitizenCardNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTown", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string HomeTown
		{
			get
			{
				return this._HomeTown;
			}
			set
			{
				if ((this._HomeTown != value))
				{
					this.OnHomeTownChanging(value);
					this.SendPropertyChanging();
					this._HomeTown = value;
					this.SendPropertyChanged("HomeTown");
					this.OnHomeTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="SmallDateTime ")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISAccountNumber", DbType="nvarchar(20)")]
		public string GISAccountNumber
		{
			get
			{
				return this._GISAccountNumber;
			}
			set
			{
				if ((this._GISAccountNumber != value))
				{
					this.OnGISAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._GISAccountNumber = value;
					this.SendPropertyChanged("GISAccountNumber");
					this.OnGISAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tpn", DbType="nvarchar(15)", UpdateCheck=UpdateCheck.Never)]
		public string Tpn
		{
			get
			{
				return this._Tpn;
			}
			set
			{
				if ((this._Tpn != value))
				{
					this.OnTpnChanging(value);
					this.SendPropertyChanging();
					this._Tpn = value;
					this.SendPropertyChanged("Tpn");
					this.OnTpnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentOrganization", DbType="nvarchar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ParentOrganization
		{
			get
			{
				return this._ParentOrganization;
			}
			set
			{
				if ((this._ParentOrganization != value))
				{
					this.OnParentOrganizationChanging(value);
					this.SendPropertyChanging();
					this._ParentOrganization = value;
					this.SendPropertyChanged("ParentOrganization");
					this.OnParentOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPFNo", DbType="nVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string GPFAccountNo
		{
			get
			{
				return this._GPFNo;
			}
			set
			{
				if ((this._GPFNo != value))
				{
					this.OnGPFAccountNoChanging(value);
					this.SendPropertyChanging();
					this._GPFNo = value;
					this.SendPropertyChanged("GPFAccountNo");
					this.OnGPFAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccountNo", DbType="nVarChar(30)")]
		public string BankAccountNo
		{
			get
			{
				return this._BankAccountNo;
			}
			set
			{
				if ((this._BankAccountNo != value))
				{
					this.OnBankAccountNoChanging(value);
					this.SendPropertyChanging();
					this._BankAccountNo = value;
					this.SendPropertyChanged("BankAccountNo");
					this.OnBankAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10)", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BDFCAccountNo", DbType="NVarChar(30)", CanBeNull=false)]
		public string BDFCAccountNo
		{
			get
			{
				return this._BDFCAccountNo;
			}
			set
			{
				if ((this._BDFCAccountNo != value))
				{
					this.OnBDFCAccountNoChanging(value);
					this.SendPropertyChanging();
					this._BDFCAccountNo = value;
					this.SendPropertyChanged("BDFCAccountNo");
					this.OnBDFCAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankLoanAccountNo", DbType="NVarChar(30)", CanBeNull=false)]
		public string BankLoanAccountNo
		{
			get
			{
				return this._BankLoanAccountNo;
			}
			set
			{
				if ((this._BankLoanAccountNo != value))
				{
					this.OnBankLoanAccountNoChanging(value);
					this.SendPropertyChanging();
					this._BankLoanAccountNo = value;
					this.SendPropertyChanged("BankLoanAccountNo");
					this.OnBankLoanAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPPFPNo", DbType="NVarChar(30)", CanBeNull=false)]
		public string NPPFPNo
		{
			get
			{
				return this._NPPFPNo;
			}
			set
			{
				if ((this._NPPFPNo != value))
				{
					this.OnNPPFPNoChanging(value);
					this.SendPropertyChanging();
					this._NPPFPNo = value;
					this.SendPropertyChanged("NPPFPNo");
					this.OnNPPFPNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankPlace", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string BankPlace
		{
			get
			{
				return this._BankPlace;
			}
			set
			{
				if ((this._BankPlace != value))
				{
					this.OnBankPlaceChanging(value);
					this.SendPropertyChanging();
					this._BankPlace = value;
					this.SendPropertyChanged("BankPlace");
					this.OnBankPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISGroup", DbType="NVarChar(5)", UpdateCheck=UpdateCheck.Never)]
		public string GISGroup
		{
			get
			{
				return this._GISGroup;
			}
			set
			{
				if ((this._GISGroup != value))
				{
					this.OnGISGroupChanging(value);
					this.SendPropertyChanging();
					this._GISGroup = value;
					this.SendPropertyChanged("GISGroup");
					this.OnGISGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusId", DbType="int ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MaritalStatusId
		{
			get
			{
				return this._MaritalStatusId;
			}
			set
			{
				if ((this._MaritalStatusId != value))
				{
					if (this._MaritalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusId = value;
					this.SendPropertyChanged("MaritalStatusId");
					this.OnMaritalStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRelieve")]
		public System.Nullable<System.DateTime> DateOfRelieve
		{
			get
			{
				return this._DateOfRelieve;
			}
			set
			{
				if ((this._DateOfRelieve != value))
				{
					this.OnDateOfRelieveChanging(value);
					this.SendPropertyChanging();
					this._DateOfRelieve = value;
					this.SendPropertyChanged("DateOfRelieve");
					this.OnDateOfRelieveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPPFType", CanBeNull=false)]
		public string NPPFType
		{
			get
			{
				return this._NPPFType;
			}
			set
			{
				if ((this._NPPFType != value))
				{
					this.OnNPPFTypeChanging(value);
					this.SendPropertyChanging();
					this._NPPFType = value;
					this.SendPropertyChanged("NPPFType");
					this.OnNPPFTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationId")]
		public int StationId
		{
			get
			{
				return this._StationId;
			}
			set
			{
				if ((this._StationId != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIdChanging(value);
					this.SendPropertyChanging();
					this._StationId = value;
					this.SendPropertyChanged("StationId");
					this.OnStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeAdjustment", Storage="_EmployeeAdjustments", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<EmployeeAdjustment> EmployeeAdjustments
		{
			get
			{
				return this._EmployeeAdjustments;
			}
			set
			{
				this._EmployeeAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeePeriod", Storage="_EmployeePeriods", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<EmployeePeriod> EmployeePeriods
		{
			get
			{
				return this._EmployeePeriods;
			}
			set
			{
				this._EmployeePeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ServicePeriod", Storage="_ServicePeriods", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<ServicePeriod> ServicePeriods
		{
			get
			{
				return this._ServicePeriods;
			}
			set
			{
				this._ServicePeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Employee", Storage="_Division", ThisKey="DivisionId", OtherKey="DivisionId", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DivisionId = value.DivisionId;
					}
					else
					{
						this._DivisionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_EmployeeType", ThisKey="EmployeeTypeId", OtherKey="EmployeeTypeId", IsForeignKey=true)]
		public EmployeeType EmployeeType
		{
			get
			{
				return this._EmployeeType.Entity;
			}
			set
			{
				EmployeeType previousValue = this._EmployeeType.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeType.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._EmployeeType.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._EmployeeTypeId = value.EmployeeTypeId;
					}
					else
					{
						this._EmployeeTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmployeeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Employee", Storage="_MaritalStatus", ThisKey="MaritalStatusId", OtherKey="MaritalStatusId", IsForeignKey=true)]
		public MaritalStatus MaritalStatus
		{
			get
			{
				return this._MaritalStatus.Entity;
			}
			set
			{
				MaritalStatus previousValue = this._MaritalStatus.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatus.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._MaritalStatus.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._MaritalStatusId = value.MaritalStatusId;
					}
					else
					{
						this._MaritalStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Employee", Storage="_Station", ThisKey="StationId", OtherKey="StationId", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._StationId = value.StationId;
					}
					else
					{
						this._StationId = default(int);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Employee", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeAdjustments(EmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeAdjustments(EmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeePeriods(EmployeePeriod entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeePeriods(EmployeePeriod entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ServicePeriods(ServicePeriod entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ServicePeriods(ServicePeriod entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Division")]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DivisionId = default(int);
		
		private string _DivisionCode = default(string);
		
		private string _DivisionGroup = default(string);
		
		private string _DivisionName = default(string);
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public Division()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int DivisionId
		{
			get
			{
				return this._DivisionId;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DivisionCode
		{
			get
			{
				return this._DivisionCode;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionGroup", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DivisionGroup
		{
			get
			{
				return this._DivisionGroup;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DivisionName
		{
			get
			{
				return this._DivisionName;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Employee", Storage="_Employees", ThisKey="DivisionId", OtherKey="DivisionId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.Adjustment")]
	public partial class Adjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdjustmentId;
		
		private string _AdjustmentCode;
		
		private System.Nullable<int> _EmployeeTypeId;
		
		private System.Nullable<double> _PercentageBasic;
		
		private System.Nullable<int> _HeadOfAccountId;
		
		private string _Description;
		
		private System.Nullable<decimal> _FlatAmount;
		
		private bool _IsDeduction;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private bool _IsDefault;
		
		private System.Nullable<int> _AdjustmentCategoryId;
		
		private string _ShortDescription;
		
		private EntitySet<EmployeeAdjustment> _EmployeeAdjustments;
		
		private EntitySet<PeriodEmployeeAdjustment> _PeriodEmployeeAdjustments;
		
		private EntityRef<HeadOfAccount> _HeadOfAccount;
		
		private EntityRef<EmployeeType> _EmployeeType;
		
		private EntityRef<AdjustmentCategory> _AdjustmentCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdjustmentIdChanging(int value);
    partial void OnAdjustmentIdChanged();
    partial void OnAdjustmentCodeChanging(string value);
    partial void OnAdjustmentCodeChanged();
    partial void OnEmployeeTypeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeTypeIdChanged();
    partial void OnFractionOfBasicChanging(System.Nullable<double> value);
    partial void OnFractionOfBasicChanged();
    partial void OnHeadOfAccountIdChanging(System.Nullable<int> value);
    partial void OnHeadOfAccountIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFlatAmountChanging(System.Nullable<decimal> value);
    partial void OnFlatAmountChanged();
    partial void OnIsDeductionChanging(bool value);
    partial void OnIsDeductionChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnAdjustmentCategoryIdChanging(System.Nullable<int> value);
    partial void OnAdjustmentCategoryIdChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    #endregion
		
		public Adjustment()
		{
			this._EmployeeAdjustments = new EntitySet<EmployeeAdjustment>(new Action<EmployeeAdjustment>(this.attach_EmployeeAdjustments), new Action<EmployeeAdjustment>(this.detach_EmployeeAdjustments));
			this._PeriodEmployeeAdjustments = new EntitySet<PeriodEmployeeAdjustment>(new Action<PeriodEmployeeAdjustment>(this.attach_PeriodEmployeeAdjustments), new Action<PeriodEmployeeAdjustment>(this.detach_PeriodEmployeeAdjustments));
			this._HeadOfAccount = default(EntityRef<HeadOfAccount>);
			this._EmployeeType = default(EntityRef<EmployeeType>);
			this._AdjustmentCategory = default(EntityRef<AdjustmentCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AdjustmentId
		{
			get
			{
				return this._AdjustmentId;
			}
			set
			{
				if ((this._AdjustmentId != value))
				{
					this.OnAdjustmentIdChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentId = value;
					this.SendPropertyChanged("AdjustmentId");
					this.OnAdjustmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentCode", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AdjustmentCode
		{
			get
			{
				return this._AdjustmentCode;
			}
			set
			{
				if ((this._AdjustmentCode != value))
				{
					this.OnAdjustmentCodeChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentCode = value;
					this.SendPropertyChanged("AdjustmentCode");
					this.OnAdjustmentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EmployeeTypeId
		{
			get
			{
				return this._EmployeeTypeId;
			}
			set
			{
				if ((this._EmployeeTypeId != value))
				{
					if (this._EmployeeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeId = value;
					this.SendPropertyChanged("EmployeeTypeId");
					this.OnEmployeeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentageBasic", DbType="float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FractionOfBasic
		{
			get
			{
				return this._PercentageBasic;
			}
			set
			{
				if ((this._PercentageBasic != value))
				{
					this.OnFractionOfBasicChanging(value);
					this.SendPropertyChanging();
					this._PercentageBasic = value;
					this.SendPropertyChanged("FractionOfBasic");
					this.OnFractionOfBasicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadOfAccountId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> HeadOfAccountId
		{
			get
			{
				return this._HeadOfAccountId;
			}
			set
			{
				if ((this._HeadOfAccountId != value))
				{
					if (this._HeadOfAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadOfAccountIdChanging(value);
					this.SendPropertyChanging();
					this._HeadOfAccountId = value;
					this.SendPropertyChanged("HeadOfAccountId");
					this.OnHeadOfAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatAmount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FlatAmount
		{
			get
			{
				return this._FlatAmount;
			}
			set
			{
				if ((this._FlatAmount != value))
				{
					this.OnFlatAmountChanging(value);
					this.SendPropertyChanging();
					this._FlatAmount = value;
					this.SendPropertyChanged("FlatAmount");
					this.OnFlatAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeduction", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDeduction
		{
			get
			{
				return this._IsDeduction;
			}
			set
			{
				if ((this._IsDeduction != value))
				{
					this.OnIsDeductionChanging(value);
					this.SendPropertyChanging();
					this._IsDeduction = value;
					this.SendPropertyChanged("IsDeduction");
					this.OnIsDeductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="bit", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentCategoryId", DbType="int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AdjustmentCategoryId
		{
			get
			{
				return this._AdjustmentCategoryId;
			}
			set
			{
				if ((this._AdjustmentCategoryId != value))
				{
					if (this._AdjustmentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentCategoryId = value;
					this.SendPropertyChanged("AdjustmentCategoryId");
					this.OnAdjustmentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="nvarchar(30)", UpdateCheck=UpdateCheck.Never)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_EmployeeAdjustment", Storage="_EmployeeAdjustments", ThisKey="AdjustmentId", OtherKey="AdjustmentId")]
		public EntitySet<EmployeeAdjustment> EmployeeAdjustments
		{
			get
			{
				return this._EmployeeAdjustments;
			}
			set
			{
				this._EmployeeAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_PeriodEmployeeAdjustment", Storage="_PeriodEmployeeAdjustments", ThisKey="AdjustmentId", OtherKey="AdjustmentId")]
		public EntitySet<PeriodEmployeeAdjustment> PeriodEmployeeAdjustments
		{
			get
			{
				return this._PeriodEmployeeAdjustments;
			}
			set
			{
				this._PeriodEmployeeAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HeadOfAccount_Adjustment", Storage="_HeadOfAccount", ThisKey="HeadOfAccountId", OtherKey="HeadOfAccountId", IsForeignKey=true)]
		public HeadOfAccount HeadOfAccount
		{
			get
			{
				return this._HeadOfAccount.Entity;
			}
			set
			{
				HeadOfAccount previousValue = this._HeadOfAccount.Entity;
				if (((previousValue != value) 
							|| (this._HeadOfAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HeadOfAccount.Entity = null;
						previousValue.Adjustments.Remove(this);
					}
					this._HeadOfAccount.Entity = value;
					if ((value != null))
					{
						value.Adjustments.Add(this);
						this._HeadOfAccountId = value.HeadOfAccountId;
					}
					else
					{
						this._HeadOfAccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("HeadOfAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Adjustment", Storage="_EmployeeType", ThisKey="EmployeeTypeId", OtherKey="EmployeeTypeId", IsForeignKey=true)]
		public EmployeeType EmployeeType
		{
			get
			{
				return this._EmployeeType.Entity;
			}
			set
			{
				EmployeeType previousValue = this._EmployeeType.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeType.Entity = null;
						previousValue.Adjustments.Remove(this);
					}
					this._EmployeeType.Entity = value;
					if ((value != null))
					{
						value.Adjustments.Add(this);
						this._EmployeeTypeId = value.EmployeeTypeId;
					}
					else
					{
						this._EmployeeTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmployeeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdjustmentCategory_Adjustment", Storage="_AdjustmentCategory", ThisKey="AdjustmentCategoryId", OtherKey="AdjustmentCategoryId", IsForeignKey=true)]
		public AdjustmentCategory AdjustmentCategory
		{
			get
			{
				return this._AdjustmentCategory.Entity;
			}
			set
			{
				AdjustmentCategory previousValue = this._AdjustmentCategory.Entity;
				if (((previousValue != value) 
							|| (this._AdjustmentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdjustmentCategory.Entity = null;
						previousValue.Adjustments.Remove(this);
					}
					this._AdjustmentCategory.Entity = value;
					if ((value != null))
					{
						value.Adjustments.Add(this);
						this._AdjustmentCategoryId = value.AdjustmentCategoryId;
					}
					else
					{
						this._AdjustmentCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdjustmentCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeAdjustments(EmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_EmployeeAdjustments(EmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
		
		private void attach_PeriodEmployeeAdjustments(PeriodEmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = this;
		}
		
		private void detach_PeriodEmployeeAdjustments(PeriodEmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.Adjustment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.EmployeeAdjustment")]
	public partial class EmployeeAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeAdjustmentId;
		
		private int _EmployeeId;
		
		private int _AdjustmentId;
		
		private System.Nullable<double> _PercentageBasic;
		
		private bool _IsPercentageBasicOverridden;
		
		private System.Nullable<decimal> _FlatAmount;
		
		private bool _IsFlatAmountOverridden;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private string _ModifiedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Data.Linq.Binary _Version;
		
		private string _Comment;
		
		private EntityRef<Adjustment> _Adjustment;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeAdjustmentIdChanging(int value);
    partial void OnEmployeeAdjustmentIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnAdjustmentIdChanging(int value);
    partial void OnAdjustmentIdChanged();
    partial void OnFractionOfBasicChanging(System.Nullable<double> value);
    partial void OnFractionOfBasicChanged();
    partial void OnIsFractionBasicOverriddenChanging(bool value);
    partial void OnIsFractionBasicOverriddenChanged();
    partial void OnFlatAmountChanging(System.Nullable<decimal> value);
    partial void OnFlatAmountChanged();
    partial void OnIsFlatAmountOverriddenChanging(bool value);
    partial void OnIsFlatAmountOverriddenChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public EmployeeAdjustment()
		{
			this._Adjustment = default(EntityRef<Adjustment>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeAdjustmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int EmployeeAdjustmentId
		{
			get
			{
				return this._EmployeeAdjustmentId;
			}
			set
			{
				if ((this._EmployeeAdjustmentId != value))
				{
					this.OnEmployeeAdjustmentIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAdjustmentId = value;
					this.SendPropertyChanged("EmployeeAdjustmentId");
					this.OnEmployeeAdjustmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public int AdjustmentId
		{
			get
			{
				return this._AdjustmentId;
			}
			set
			{
				if ((this._AdjustmentId != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIdChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentId = value;
					this.SendPropertyChanged("AdjustmentId");
					this.OnAdjustmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentageBasic", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FractionOfBasic
		{
			get
			{
				return this._PercentageBasic;
			}
			set
			{
				if ((this._PercentageBasic != value))
				{
					this.OnFractionOfBasicChanging(value);
					this.SendPropertyChanging();
					this._PercentageBasic = value;
					this.SendPropertyChanged("FractionOfBasic");
					this.OnFractionOfBasicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPercentageBasicOverridden", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public bool IsFractionBasicOverridden
		{
			get
			{
				return this._IsPercentageBasicOverridden;
			}
			set
			{
				if ((this._IsPercentageBasicOverridden != value))
				{
					this.OnIsFractionBasicOverriddenChanging(value);
					this.SendPropertyChanging();
					this._IsPercentageBasicOverridden = value;
					this.SendPropertyChanged("IsFractionBasicOverridden");
					this.OnIsFractionBasicOverriddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatAmount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FlatAmount
		{
			get
			{
				return this._FlatAmount;
			}
			set
			{
				if ((this._FlatAmount != value))
				{
					this.OnFlatAmountChanging(value);
					this.SendPropertyChanging();
					this._FlatAmount = value;
					this.SendPropertyChanged("FlatAmount");
					this.OnFlatAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFlatAmountOverridden", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public bool IsFlatAmountOverridden
		{
			get
			{
				return this._IsFlatAmountOverridden;
			}
			set
			{
				if ((this._IsFlatAmountOverridden != value))
				{
					this.OnIsFlatAmountOverriddenChanging(value);
					this.SendPropertyChanging();
					this._IsFlatAmountOverridden = value;
					this.SendPropertyChanged("IsFlatAmountOverridden");
					this.OnIsFlatAmountOverriddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NvarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_EmployeeAdjustment", Storage="_Adjustment", ThisKey="AdjustmentId", OtherKey="AdjustmentId", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.EmployeeAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.EmployeeAdjustments.Add(this);
						this._AdjustmentId = value.AdjustmentId;
					}
					else
					{
						this._AdjustmentId = default(int);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeAdjustment", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeAdjustments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeAdjustments.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.SalaryPeriod")]
	public partial class SalaryPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryPeriodId;
		
		private System.DateTime _SalaryPeriodStart;
		
		private System.DateTime _SalaryPeriodEnd;
		
		private System.Nullable<System.DateTime> _PayableDate;
		
		private System.Nullable<System.DateTime> _PaidDate;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private string _SalaryPeriodCode;
		
		private string _Description;
		
		private string _BankName;
		
		private System.Nullable<int> _StationId;
		
		private string _MRNumber;
		
		private System.Nullable<System.DateTime> _MRNumberDate;
		
		private EntitySet<EmployeePeriod> _EmployeePeriods;
		
		private EntityRef<Station> _Station;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryPeriodIdChanging(int value);
    partial void OnSalaryPeriodIdChanged();
    partial void OnSalaryPeriodStartChanging(System.DateTime value);
    partial void OnSalaryPeriodStartChanged();
    partial void OnSalaryPeriodEndChanging(System.DateTime value);
    partial void OnSalaryPeriodEndChanged();
    partial void OnPayableDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPayableDateChanged();
    partial void OnPaidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaidDateChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnSalaryPeriodCodeChanging(string value);
    partial void OnSalaryPeriodCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnStationIdChanging(System.Nullable<int> value);
    partial void OnStationIdChanged();
    partial void OnMRNumberChanging(string value);
    partial void OnMRNumberChanged();
    partial void OnMRNumberDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMRNumberDateChanged();
    #endregion
		
		public SalaryPeriod()
		{
			this._EmployeePeriods = new EntitySet<EmployeePeriod>(new Action<EmployeePeriod>(this.attach_EmployeePeriods), new Action<EmployeePeriod>(this.detach_EmployeePeriods));
			this._Station = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPeriodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int SalaryPeriodId
		{
			get
			{
				return this._SalaryPeriodId;
			}
			set
			{
				if ((this._SalaryPeriodId != value))
				{
					this.OnSalaryPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._SalaryPeriodId = value;
					this.SendPropertyChanged("SalaryPeriodId");
					this.OnSalaryPeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPeriodStart", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime SalaryPeriodStart
		{
			get
			{
				return this._SalaryPeriodStart;
			}
			set
			{
				if ((this._SalaryPeriodStart != value))
				{
					this.OnSalaryPeriodStartChanging(value);
					this.SendPropertyChanging();
					this._SalaryPeriodStart = value;
					this.SendPropertyChanged("SalaryPeriodStart");
					this.OnSalaryPeriodStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPeriodEnd", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime SalaryPeriodEnd
		{
			get
			{
				return this._SalaryPeriodEnd;
			}
			set
			{
				if ((this._SalaryPeriodEnd != value))
				{
					this.OnSalaryPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._SalaryPeriodEnd = value;
					this.SendPropertyChanged("SalaryPeriodEnd");
					this.OnSalaryPeriodEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayableDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PayableDate
		{
			get
			{
				return this._PayableDate;
			}
			set
			{
				if ((this._PayableDate != value))
				{
					this.OnPayableDateChanging(value);
					this.SendPropertyChanging();
					this._PayableDate = value;
					this.SendPropertyChanged("PayableDate");
					this.OnPayableDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PaidDate
		{
			get
			{
				return this._PaidDate;
			}
			set
			{
				if ((this._PaidDate != value))
				{
					this.OnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._PaidDate = value;
					this.SendPropertyChanged("PaidDate");
					this.OnPaidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", AutoSync=AutoSync.Always, DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPeriodCode", DbType="NvarChar(50)", CanBeNull=false)]
		public string SalaryPeriodCode
		{
			get
			{
				return this._SalaryPeriodCode;
			}
			set
			{
				if ((this._SalaryPeriodCode != value))
				{
					this.OnSalaryPeriodCodeChanging(value);
					this.SendPropertyChanging();
					this._SalaryPeriodCode = value;
					this.SendPropertyChanged("SalaryPeriodCode");
					this.OnSalaryPeriodCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NvarChar(50)", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NvarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationId")]
		public System.Nullable<int> StationId
		{
			get
			{
				return this._StationId;
			}
			set
			{
				if ((this._StationId != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIdChanging(value);
					this.SendPropertyChanging();
					this._StationId = value;
					this.SendPropertyChanged("StationId");
					this.OnStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRNumber", DbType="NVarChar(50)")]
		public string MRNumber
		{
			get
			{
				return this._MRNumber;
			}
			set
			{
				if ((this._MRNumber != value))
				{
					this.OnMRNumberChanging(value);
					this.SendPropertyChanging();
					this._MRNumber = value;
					this.SendPropertyChanged("MRNumber");
					this.OnMRNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRNumberDate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> MRNumberDate
		{
			get
			{
				return this._MRNumberDate;
			}
			set
			{
				if ((this._MRNumberDate != value))
				{
					this.OnMRNumberDateChanging(value);
					this.SendPropertyChanging();
					this._MRNumberDate = value;
					this.SendPropertyChanged("MRNumberDate");
					this.OnMRNumberDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalaryPeriod_EmployeePeriod", Storage="_EmployeePeriods", ThisKey="SalaryPeriodId", OtherKey="SalaryPeriodId")]
		public EntitySet<EmployeePeriod> EmployeePeriods
		{
			get
			{
				return this._EmployeePeriods;
			}
			set
			{
				this._EmployeePeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_SalaryPeriod", Storage="_Station", ThisKey="StationId", OtherKey="StationId", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.SalaryPeriods.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.SalaryPeriods.Add(this);
						this._StationId = value.StationId;
					}
					else
					{
						this._StationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeePeriods(EmployeePeriod entity)
		{
			this.SendPropertyChanging();
			entity.SalaryPeriod = this;
		}
		
		private void detach_EmployeePeriods(EmployeePeriod entity)
		{
			this.SendPropertyChanging();
			entity.SalaryPeriod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HeadOfAccount")]
	public partial class HeadOfAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HeadOfAccountId = default(int);
		
		private System.Nullable<int> _ParentHeadOfAccountId = default(System.Nullable<int>);
		
		private short _NameWithinParent = default(short);
		
		private string _DisplayName = default(string);
		
		private string _Description = default(string);
		
		private string _HeadOfAccountType = default(string);
		
		private EntitySet<Adjustment> _Adjustments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public HeadOfAccount()
		{
			this._Adjustments = new EntitySet<Adjustment>(new Action<Adjustment>(this.attach_Adjustments), new Action<Adjustment>(this.detach_Adjustments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadOfAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int HeadOfAccountId
		{
			get
			{
				return this._HeadOfAccountId;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentHeadOfAccountId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentHeadOfAccountId
		{
			get
			{
				return this._ParentHeadOfAccountId;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameWithinParent", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short NameWithinParent
		{
			get
			{
				return this._NameWithinParent;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadOfAccountType", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string HeadOfAccountType
		{
			get
			{
				return this._HeadOfAccountType;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HeadOfAccount_Adjustment", Storage="_Adjustments", ThisKey="HeadOfAccountId", OtherKey="HeadOfAccountId")]
		public EntitySet<Adjustment> Adjustments
		{
			get
			{
				return this._Adjustments;
			}
			set
			{
				this._Adjustments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.HeadOfAccount = this;
		}
		
		private void detach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.HeadOfAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.PeriodEmployeeAdjustment")]
	public partial class PeriodEmployeeAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeriodEmployeeAdjustmentId;
		
		private int _EmployeePeriodId;
		
		private int _AdjustmentId;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private bool _IsAmountOverridden;
		
		private string _Comment;
		
		private EntityRef<Adjustment> _Adjustment;
		
		private EntityRef<EmployeePeriod> _EmployeePeriod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodEmployeeAdjustmentIdChanging(int value);
    partial void OnPeriodEmployeeAdjustmentIdChanged();
    partial void OnEmployeePeriodIdChanging(int value);
    partial void OnEmployeePeriodIdChanged();
    partial void OnAdjustmentIdChanging(int value);
    partial void OnAdjustmentIdChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnIsAmountOverriddenChanging(bool value);
    partial void OnIsAmountOverriddenChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public PeriodEmployeeAdjustment()
		{
			this._Adjustment = default(EntityRef<Adjustment>);
			this._EmployeePeriod = default(EntityRef<EmployeePeriod>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodEmployeeAdjustmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PeriodEmployeeAdjustmentId
		{
			get
			{
				return this._PeriodEmployeeAdjustmentId;
			}
			set
			{
				if ((this._PeriodEmployeeAdjustmentId != value))
				{
					this.OnPeriodEmployeeAdjustmentIdChanging(value);
					this.SendPropertyChanging();
					this._PeriodEmployeeAdjustmentId = value;
					this.SendPropertyChanged("PeriodEmployeeAdjustmentId");
					this.OnPeriodEmployeeAdjustmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePeriodId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeePeriodId
		{
			get
			{
				return this._EmployeePeriodId;
			}
			set
			{
				if ((this._EmployeePeriodId != value))
				{
					if (this._EmployeePeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeePeriodIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeePeriodId = value;
					this.SendPropertyChanged("EmployeePeriodId");
					this.OnEmployeePeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AdjustmentId
		{
			get
			{
				return this._AdjustmentId;
			}
			set
			{
				if ((this._AdjustmentId != value))
				{
					if (this._Adjustment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentIdChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentId = value;
					this.SendPropertyChanged("AdjustmentId");
					this.OnAdjustmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", AutoSync=AutoSync.Always, DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAmountOverridden", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAmountOverridden
		{
			get
			{
				return this._IsAmountOverridden;
			}
			set
			{
				if ((this._IsAmountOverridden != value))
				{
					this.OnIsAmountOverriddenChanging(value);
					this.SendPropertyChanging();
					this._IsAmountOverridden = value;
					this.SendPropertyChanged("IsAmountOverridden");
					this.OnIsAmountOverriddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NvarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adjustment_PeriodEmployeeAdjustment", Storage="_Adjustment", ThisKey="AdjustmentId", OtherKey="AdjustmentId", IsForeignKey=true)]
		public Adjustment Adjustment
		{
			get
			{
				return this._Adjustment.Entity;
			}
			set
			{
				Adjustment previousValue = this._Adjustment.Entity;
				if (((previousValue != value) 
							|| (this._Adjustment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adjustment.Entity = null;
						previousValue.PeriodEmployeeAdjustments.Remove(this);
					}
					this._Adjustment.Entity = value;
					if ((value != null))
					{
						value.PeriodEmployeeAdjustments.Add(this);
						this._AdjustmentId = value.AdjustmentId;
					}
					else
					{
						this._AdjustmentId = default(int);
					}
					this.SendPropertyChanged("Adjustment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeePeriod_PeriodEmployeeAdjustment", Storage="_EmployeePeriod", ThisKey="EmployeePeriodId", OtherKey="EmployeePeriodId", IsForeignKey=true)]
		public EmployeePeriod EmployeePeriod
		{
			get
			{
				return this._EmployeePeriod.Entity;
			}
			set
			{
				EmployeePeriod previousValue = this._EmployeePeriod.Entity;
				if (((previousValue != value) 
							|| (this._EmployeePeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeePeriod.Entity = null;
						previousValue.PeriodEmployeeAdjustments.Remove(this);
					}
					this._EmployeePeriod.Entity = value;
					if ((value != null))
					{
						value.PeriodEmployeeAdjustments.Add(this);
						this._EmployeePeriodId = value.EmployeePeriodId;
					}
					else
					{
						this._EmployeePeriodId = default(int);
					}
					this.SendPropertyChanged("EmployeePeriod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.EmployeePeriod")]
	public partial class EmployeePeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeePeriodId;
		
		private int _EmployeeId;
		
		private int _SalaryPeriodId;
		
		private System.Nullable<decimal> _BasicPay;
		
		private bool _IsBasicPayOverridden;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<int> _VoucherId;
		
		private EntitySet<PeriodEmployeeAdjustment> _PeriodEmployeeAdjustments;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SalaryPeriod> _SalaryPeriod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeePeriodIdChanging(int value);
    partial void OnEmployeePeriodIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnSalaryPeriodIdChanging(int value);
    partial void OnSalaryPeriodIdChanged();
    partial void OnBasicPayChanging(System.Nullable<decimal> value);
    partial void OnBasicPayChanged();
    partial void OnIsBasicPayOverriddenChanging(bool value);
    partial void OnIsBasicPayOverriddenChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnVoucherIdChanging(System.Nullable<int> value);
    partial void OnVoucherIdChanged();
    #endregion
		
		public EmployeePeriod()
		{
			this._PeriodEmployeeAdjustments = new EntitySet<PeriodEmployeeAdjustment>(new Action<PeriodEmployeeAdjustment>(this.attach_PeriodEmployeeAdjustments), new Action<PeriodEmployeeAdjustment>(this.detach_PeriodEmployeeAdjustments));
			this._Employee = default(EntityRef<Employee>);
			this._SalaryPeriod = default(EntityRef<SalaryPeriod>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePeriodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int EmployeePeriodId
		{
			get
			{
				return this._EmployeePeriodId;
			}
			set
			{
				if ((this._EmployeePeriodId != value))
				{
					this.OnEmployeePeriodIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeePeriodId = value;
					this.SendPropertyChanged("EmployeePeriodId");
					this.OnEmployeePeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPeriodId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SalaryPeriodId
		{
			get
			{
				return this._SalaryPeriodId;
			}
			set
			{
				if ((this._SalaryPeriodId != value))
				{
					if (this._SalaryPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalaryPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._SalaryPeriodId = value;
					this.SendPropertyChanged("SalaryPeriodId");
					this.OnSalaryPeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicPay", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BasicPay
		{
			get
			{
				return this._BasicPay;
			}
			set
			{
				if ((this._BasicPay != value))
				{
					this.OnBasicPayChanging(value);
					this.SendPropertyChanging();
					this._BasicPay = value;
					this.SendPropertyChanged("BasicPay");
					this.OnBasicPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBasicPayOverridden", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsBasicPayOverridden
		{
			get
			{
				return this._IsBasicPayOverridden;
			}
			set
			{
				if ((this._IsBasicPayOverridden != value))
				{
					this.OnIsBasicPayOverriddenChanging(value);
					this.SendPropertyChanging();
					this._IsBasicPayOverridden = value;
					this.SendPropertyChanged("IsBasicPayOverridden");
					this.OnIsBasicPayOverriddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", AutoSync=AutoSync.Always, DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", AutoSync=AutoSync.Always, DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", AutoSync=AutoSync.Always, DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", AutoSync=AutoSync.Always, DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> VoucherId
		{
			get
			{
				return this._VoucherId;
			}
			set
			{
				if ((this._VoucherId != value))
				{
					this.OnVoucherIdChanging(value);
					this.SendPropertyChanging();
					this._VoucherId = value;
					this.SendPropertyChanged("VoucherId");
					this.OnVoucherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeePeriod_PeriodEmployeeAdjustment", Storage="_PeriodEmployeeAdjustments", ThisKey="EmployeePeriodId", OtherKey="EmployeePeriodId")]
		public EntitySet<PeriodEmployeeAdjustment> PeriodEmployeeAdjustments
		{
			get
			{
				return this._PeriodEmployeeAdjustments;
			}
			set
			{
				this._PeriodEmployeeAdjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeePeriod", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeePeriods.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeePeriods.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalaryPeriod_EmployeePeriod", Storage="_SalaryPeriod", ThisKey="SalaryPeriodId", OtherKey="SalaryPeriodId", IsForeignKey=true)]
		public SalaryPeriod SalaryPeriod
		{
			get
			{
				return this._SalaryPeriod.Entity;
			}
			set
			{
				SalaryPeriod previousValue = this._SalaryPeriod.Entity;
				if (((previousValue != value) 
							|| (this._SalaryPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalaryPeriod.Entity = null;
						previousValue.EmployeePeriods.Remove(this);
					}
					this._SalaryPeriod.Entity = value;
					if ((value != null))
					{
						value.EmployeePeriods.Add(this);
						this._SalaryPeriodId = value.SalaryPeriodId;
					}
					else
					{
						this._SalaryPeriodId = default(int);
					}
					this.SendPropertyChanged("SalaryPeriod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PeriodEmployeeAdjustments(PeriodEmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.EmployeePeriod = this;
		}
		
		private void detach_PeriodEmployeeAdjustments(PeriodEmployeeAdjustment entity)
		{
			this.SendPropertyChanging();
			entity.EmployeePeriod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.EmployeeType")]
	public partial class EmployeeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTypeId;
		
		private string _EmployeeTypeCode;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedWorkstation;
		
		private string _ModifiedBy;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Adjustment> _Adjustments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTypeIdChanging(int value);
    partial void OnEmployeeTypeIdChanged();
    partial void OnEmployeeTypeCodeChanging(string value);
    partial void OnEmployeeTypeCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EmployeeType()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Adjustments = new EntitySet<Adjustment>(new Action<Adjustment>(this.attach_Adjustments), new Action<Adjustment>(this.detach_Adjustments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int EmployeeTypeId
		{
			get
			{
				return this._EmployeeTypeId;
			}
			set
			{
				if ((this._EmployeeTypeId != value))
				{
					this.OnEmployeeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeId = value;
					this.SendPropertyChanged("EmployeeTypeId");
					this.OnEmployeeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeTypeCode
		{
			get
			{
				return this._EmployeeTypeCode;
			}
			set
			{
				if ((this._EmployeeTypeCode != value))
				{
					this.OnEmployeeTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeCode = value;
					this.SendPropertyChanged("EmployeeTypeCode");
					this.OnEmployeeTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_Employees", ThisKey="EmployeeTypeId", OtherKey="EmployeeTypeId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Adjustment", Storage="_Adjustments", ThisKey="EmployeeTypeId", OtherKey="EmployeeTypeId")]
		public EntitySet<Adjustment> Adjustments
		{
			get
			{
				return this._Adjustments;
			}
			set
			{
				this._Adjustments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = null;
		}
		
		private void attach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = this;
		}
		
		private void detach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.ReportCategory")]
	public partial class ReportCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportCategoryId;
		
		private System.Nullable<int> _ReportId;
		
		private System.Nullable<int> _AdjustmentCategoryId;
		
		private EntityRef<AdjustmentCategory> _AdjustmentCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportCategoryIdChanging(int value);
    partial void OnReportCategoryIdChanged();
    partial void OnReportIdChanging(System.Nullable<int> value);
    partial void OnReportIdChanged();
    partial void OnAdjustmentCategoryIdChanging(System.Nullable<int> value);
    partial void OnAdjustmentCategoryIdChanged();
    #endregion
		
		public ReportCategory()
		{
			this._AdjustmentCategory = default(EntityRef<AdjustmentCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportCategoryId
		{
			get
			{
				return this._ReportCategoryId;
			}
			set
			{
				if ((this._ReportCategoryId != value))
				{
					this.OnReportCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ReportCategoryId = value;
					this.SendPropertyChanged("ReportCategoryId");
					this.OnReportCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportId", DbType="Int")]
		public System.Nullable<int> ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentCategoryId", DbType="Int")]
		public System.Nullable<int> AdjustmentCategoryId
		{
			get
			{
				return this._AdjustmentCategoryId;
			}
			set
			{
				if ((this._AdjustmentCategoryId != value))
				{
					if (this._AdjustmentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustmentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentCategoryId = value;
					this.SendPropertyChanged("AdjustmentCategoryId");
					this.OnAdjustmentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdjustmentCategory_ReportCategory", Storage="_AdjustmentCategory", ThisKey="AdjustmentCategoryId", OtherKey="AdjustmentCategoryId", IsForeignKey=true)]
		public AdjustmentCategory AdjustmentCategory
		{
			get
			{
				return this._AdjustmentCategory.Entity;
			}
			set
			{
				AdjustmentCategory previousValue = this._AdjustmentCategory.Entity;
				if (((previousValue != value) 
							|| (this._AdjustmentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdjustmentCategory.Entity = null;
						previousValue.ReportCategories.Remove(this);
					}
					this._AdjustmentCategory.Entity = value;
					if ((value != null))
					{
						value.ReportCategories.Add(this);
						this._AdjustmentCategoryId = value.AdjustmentCategoryId;
					}
					else
					{
						this._AdjustmentCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AdjustmentCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="payroll.AdjustmentCategory")]
	public partial class AdjustmentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdjustmentCategoryId;
		
		private string _AdjustmentCategoryCode;
		
		private string _ShortDescription;
		
		private string _Description;
		
		private bool _IsDeduction;
		
		private EntitySet<Adjustment> _Adjustments;
		
		private EntitySet<ReportCategory> _ReportCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdjustmentCategoryIdChanging(int value);
    partial void OnAdjustmentCategoryIdChanged();
    partial void OnAdjustmentCategoryCodeChanging(string value);
    partial void OnAdjustmentCategoryCodeChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeductionChanging(bool value);
    partial void OnIsDeductionChanged();
    #endregion
		
		public AdjustmentCategory()
		{
			this._Adjustments = new EntitySet<Adjustment>(new Action<Adjustment>(this.attach_Adjustments), new Action<Adjustment>(this.detach_Adjustments));
			this._ReportCategories = new EntitySet<ReportCategory>(new Action<ReportCategory>(this.attach_ReportCategories), new Action<ReportCategory>(this.detach_ReportCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdjustmentCategoryId
		{
			get
			{
				return this._AdjustmentCategoryId;
			}
			set
			{
				if ((this._AdjustmentCategoryId != value))
				{
					this.OnAdjustmentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentCategoryId = value;
					this.SendPropertyChanged("AdjustmentCategoryId");
					this.OnAdjustmentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustmentCategoryCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AdjustmentCategoryCode
		{
			get
			{
				return this._AdjustmentCategoryCode;
			}
			set
			{
				if ((this._AdjustmentCategoryCode != value))
				{
					this.OnAdjustmentCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._AdjustmentCategoryCode = value;
					this.SendPropertyChanged("AdjustmentCategoryCode");
					this.OnAdjustmentCategoryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="NVarChar(30)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeduction", DbType="Bit NOT NULL")]
		public bool IsDeduction
		{
			get
			{
				return this._IsDeduction;
			}
			set
			{
				if ((this._IsDeduction != value))
				{
					this.OnIsDeductionChanging(value);
					this.SendPropertyChanging();
					this._IsDeduction = value;
					this.SendPropertyChanged("IsDeduction");
					this.OnIsDeductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdjustmentCategory_Adjustment", Storage="_Adjustments", ThisKey="AdjustmentCategoryId", OtherKey="AdjustmentCategoryId")]
		public EntitySet<Adjustment> Adjustments
		{
			get
			{
				return this._Adjustments;
			}
			set
			{
				this._Adjustments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdjustmentCategory_ReportCategory", Storage="_ReportCategories", ThisKey="AdjustmentCategoryId", OtherKey="AdjustmentCategoryId")]
		public EntitySet<ReportCategory> ReportCategories
		{
			get
			{
				return this._ReportCategories;
			}
			set
			{
				this._ReportCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.AdjustmentCategory = this;
		}
		
		private void detach_Adjustments(Adjustment entity)
		{
			this.SendPropertyChanging();
			entity.AdjustmentCategory = null;
		}
		
		private void attach_ReportCategories(ReportCategory entity)
		{
			this.SendPropertyChanging();
			entity.AdjustmentCategory = this;
		}
		
		private void detach_ReportCategories(ReportCategory entity)
		{
			this.SendPropertyChanging();
			entity.AdjustmentCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="PIS.MaritalStatus")]
	public partial class MaritalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaritalStatusId;
		
		private string _MaritalStatusType;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaritalStatusIdChanging(int value);
    partial void OnMaritalStatusIdChanged();
    partial void OnMaritalStatusTypeChanging(string value);
    partial void OnMaritalStatusTypeChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public MaritalStatus()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MaritalStatusId
		{
			get
			{
				return this._MaritalStatusId;
			}
			set
			{
				if ((this._MaritalStatusId != value))
				{
					this.OnMaritalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusId = value;
					this.SendPropertyChanged("MaritalStatusId");
					this.OnMaritalStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusType", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MaritalStatusType
		{
			get
			{
				return this._MaritalStatusType;
			}
			set
			{
				if ((this._MaritalStatusType != value))
				{
					this.OnMaritalStatusTypeChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusType = value;
					this.SendPropertyChanged("MaritalStatusType");
					this.OnMaritalStatusTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Employee", Storage="_Employees", ThisKey="MaritalStatusId", OtherKey="MaritalStatusId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="PIS.ServicePeriod")]
	public partial class ServicePeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServicePeriodId = default(int);
		
		private int _EmployeeId = default(int);
		
		private System.DateTime _PeriodStartDate;
		
		private System.Nullable<System.DateTime> _PeriodEndDate = default(System.Nullable<System.DateTime>);
		
		private string _Designation = default(string);
		
		private System.Nullable<int> _Grade = default(System.Nullable<int>);
		
		private System.Nullable<decimal> _BasicSalary = default(System.Nullable<decimal>);
		
		private bool _IsConsolidated = default(bool);
		
		private System.Nullable<decimal> _MinPayScaleAmount = default(System.Nullable<decimal>);
		
		private System.Nullable<decimal> _MaxPayScaleAmount = default(System.Nullable<decimal>);
		
		private System.Nullable<System.DateTime> _DateOfIncrement = default(System.Nullable<System.DateTime>);
		
		private System.Nullable<decimal> _IncrementAmount = default(System.Nullable<decimal>);
		
		private string _PostedAt = default(string);
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodStartDateChanging(System.DateTime value);
    partial void OnPeriodStartDateChanged();
    #endregion
		
		public ServicePeriod()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePeriodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ServicePeriodId
		{
			get
			{
				return this._ServicePeriodId;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodStartDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime PeriodStartDate
		{
			get
			{
				return this._PeriodStartDate;
			}
			set
			{
				if ((this._PeriodStartDate != value))
				{
					this.OnPeriodStartDateChanging(value);
					this.SendPropertyChanging();
					this._PeriodStartDate = value;
					this.SendPropertyChanged("PeriodStartDate");
					this.OnPeriodStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodEndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PeriodEndDate
		{
			get
			{
				return this._PeriodEndDate;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConsolidated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsConsolidated
		{
			get
			{
				return this._IsConsolidated;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPayScaleAmount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> MinPayScaleAmount
		{
			get
			{
				return this._MinPayScaleAmount;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPayScaleAmount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> MaxPayScaleAmount
		{
			get
			{
				return this._MaxPayScaleAmount;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfIncrement", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateOfIncrement
		{
			get
			{
				return this._DateOfIncrement;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncrementAmount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> IncrementAmount
		{
			get
			{
				return this._IncrementAmount;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedAt", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string PostedAt
		{
			get
			{
				return this._PostedAt;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ServicePeriod", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ServicePeriods.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ServicePeriods.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="PIS.Station")]
	public partial class Station : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StationId;
		
		private string _StationName;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<SalaryPeriod> _SalaryPeriods;
		
		private EntitySet<Bank> _Banks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStationIdChanging(int value);
    partial void OnStationIdChanged();
    partial void OnStationNameChanging(string value);
    partial void OnStationNameChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Station()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._SalaryPeriods = new EntitySet<SalaryPeriod>(new Action<SalaryPeriod>(this.attach_SalaryPeriods), new Action<SalaryPeriod>(this.detach_SalaryPeriods));
			this._Banks = new EntitySet<Bank>(new Action<Bank>(this.attach_Banks), new Action<Bank>(this.detach_Banks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int StationId
		{
			get
			{
				return this._StationId;
			}
			set
			{
				if ((this._StationId != value))
				{
					this.OnStationIdChanging(value);
					this.SendPropertyChanging();
					this._StationId = value;
					this.SendPropertyChanged("StationId");
					this.OnStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StationName
		{
			get
			{
				return this._StationName;
			}
			set
			{
				if ((this._StationName != value))
				{
					this.OnStationNameChanging(value);
					this.SendPropertyChanging();
					this._StationName = value;
					this.SendPropertyChanged("StationName");
					this.OnStationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Employee", Storage="_Employees", ThisKey="StationId", OtherKey="StationId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_SalaryPeriod", Storage="_SalaryPeriods", ThisKey="StationId", OtherKey="StationId")]
		public EntitySet<SalaryPeriod> SalaryPeriods
		{
			get
			{
				return this._SalaryPeriods;
			}
			set
			{
				this._SalaryPeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Bank", Storage="_Banks", ThisKey="StationId", OtherKey="StationId")]
		public EntitySet<Bank> Banks
		{
			get
			{
				return this._Banks;
			}
			set
			{
				this._Banks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_SalaryPeriods(SalaryPeriod entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_SalaryPeriods(SalaryPeriod entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_Banks(Bank entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_Banks(Bank entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="PIS.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankId;
		
		private string _BankName;
		
		private string _BranchName;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CreatedWorkstation;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ModifiedWorkstation;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<int> _StationId;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Station> _Station;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIdChanging(int value);
    partial void OnBankIdChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedWorkstationChanging(string value);
    partial void OnCreatedWorkstationChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedWorkstationChanging(string value);
    partial void OnModifiedWorkstationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnStationIdChanging(System.Nullable<int> value);
    partial void OnStationIdChanged();
    #endregion
		
		public Bank()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Station = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWorkstation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedWorkstation
		{
			get
			{
				return this._CreatedWorkstation;
			}
			set
			{
				if ((this._CreatedWorkstation != value))
				{
					this.OnCreatedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._CreatedWorkstation = value;
					this.SendPropertyChanged("CreatedWorkstation");
					this.OnCreatedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedWorkstation", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string ModifiedWorkstation
		{
			get
			{
				return this._ModifiedWorkstation;
			}
			set
			{
				if ((this._ModifiedWorkstation != value))
				{
					this.OnModifiedWorkstationChanging(value);
					this.SendPropertyChanging();
					this._ModifiedWorkstation = value;
					this.SendPropertyChanged("ModifiedWorkstation");
					this.OnModifiedWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationId")]
		public System.Nullable<int> StationId
		{
			get
			{
				return this._StationId;
			}
			set
			{
				if ((this._StationId != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIdChanging(value);
					this.SendPropertyChanging();
					this._StationId = value;
					this.SendPropertyChanged("StationId");
					this.OnStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Employee", Storage="_Employees", ThisKey="BankId", OtherKey="BankId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Bank", Storage="_Station", ThisKey="StationId", OtherKey="StationId", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.Banks.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.Banks.Add(this);
						this._StationId = value.StationId;
					}
					else
					{
						this._StationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
}
#pragma warning restore 1591
