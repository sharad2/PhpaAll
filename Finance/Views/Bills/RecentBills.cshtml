@model PhpaAll.Bills.RecentBillsViewModel
@{
    ViewBag.Title = "Recent Bills";
}
@section scripts {
    <style type="text/css">
        /* Displays text in one line and truncates long text */
        .filter-truncated {
            white-space: nowrap;
            overflow: hidden;
            -ms-text-overflow: ellipsis;
            -o-text-overflow: ellipsis;
            text-overflow: ellipsis;
            max-width: 15em;
        }
    </style>
    <script type="text/javascript" src="@Links.Views.Bills.RecentBills_js"></script>
}
<h2>
    @ViewBag.Title
    <small>
        <a href="@Url.Action(MVC.ManageBills.Create())">Create new bill</a>
    </small>
</h2>
@if (Model.IsFiltered)
{
    <div class="alert alert-info" role="alert">
        Filters have been applied. <a class="alert-link" href="@Url.Action(MVC.Bills.RecentBills())">Reset Filters</a>
    </div>
}
<div class="row">
    <div class="col-md-3">
        @Html.Partial(MVC.Bills.Views._recentBillsFilterPartial, Model)

    </div>

    <div class="col-md-9">
        @if (Model.Bills.Count > 0)
        {
            <label style="color:lightblue"> <i>Showing @Model.Bills.Count Bills</i></label>
            <strong><a href="@Model.UrlExcel">Export to Excel</a></strong>
            <span class="glyphicon glyphicon-export"></span>
            <form action="@Url.Action(MVC.Bills.ApproveBills())" method="post">
                @if (Model.Approvers.Any(p => !p.Selected))
                {
                    foreach (var item in Model.Approvers.Where(p => p.Selected))
                    {
                        <input type="hidden" name="@MVC.Bills.ApproveBillsParams.approvers" value="@item.Id" />
                    }
                }
                @if (Model.Divisions.Any(p => !p.Selected))
                {
                    foreach (var item in Model.Divisions.Where(p => p.Selected))
                    {
                        <input type="hidden" name="@MVC.Bills.ApproveBillsParams.divisions" value="@item.Id" />
                    }
                }
                @if (Model.AtDivisions.Any(p => !p.Selected))
                {
                    foreach (var item in Model.AtDivisions.Where(p => p.Selected))
                    {
                        <input type="hidden" name="@MVC.Bills.ApproveBillsParams.processingDivisions" value="@item.Id" />
                    }
                }
                @if (Model.Contractors.Any(p => !p.Selected))
                {
                    foreach (var item in Model.Contractors.Where(p => p.Selected))
                    {
                        <input type="hidden" name="@MVC.Bills.ApproveBillsParams.contractors" value="@item.Id" />
                    }
                }
                @if (Model.Stations.Any(p => !p.Selected))
                {
                    foreach (var item in Model.Stations.Where(p => p.Selected))
                    {
                        <input type="hidden" name="@MVC.Bills.ApproveBillsParams.stations" value="@item.Id" />
                    }
                }
                @if (Model.DateFrom != null)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.dateFrom" value="@Html.DisplayFor(m => m.DateFrom)" />
                }
                @if (Model.DateTo != null)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.dateTo" value="@Html.DisplayFor(m => m.DateTo)" />
                }
                @if (Model.FilterDueDateNull.HasValue && Model.FilterDueDateNull.Value)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.dueDateNull" value="true" />
                }
                @if (Model.DueDateFrom != null)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.dueDateFrom" value="@Html.DisplayFor(m => m.DueDateFrom)" />
                }
                @if (Model.DueDateTo != null)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.dueDateTo" value="@Html.DisplayFor(m => m.DueDateTo)" />
                }
                @if (Model.FilterMinAmount != null)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.minAmount" value="@Model.FilterMinAmount.Value" />
                }
                @if (Model.FilterMaxAmount != null)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.maxAmount" value="@Model.FilterMaxAmount.Value" />
                }
                @if (Model.FilterApprovedBills.HasValue)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.approvedFilter" value="@Model.FilterApprovedBills.Value.ToString().ToLower()" />
                }
                @if (Model.FilterPaidBills.HasValue)
                {
                    <input type="hidden" name="@MVC.Bills.ApproveBillsParams.paidFilter" value="@Model.FilterPaidBills.Value.ToString().ToLower()" />
                }

                @if (Model.Bills.Any(p => p.VoucherId == null))
                {
                    <div class="panel panel-primary">
                        <div class="panel-heading">Selected Bills</div>
                        <div class="panel-body">
                            @if (ViewContext.HttpContext.User.IsInRole(Model.RoleApproveButtons))
                            {
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="submit" name="@MVC.Bills.ApproveBillsParams.approve" value="true" class="btn btn-success">
                                        <span class="glyphicon glyphicon-thumbs-up"></span>
                                        Approve
                                    </button>
                                    <button type="submit" name="@MVC.Bills.ApproveBillsParams.approve" value="false" class="btn btn-danger">
                                        <span class="glyphicon glyphicon-thumbs-down"></span>
                                        Unapprove
                                    </button>
                                </div>
                            }
                            else
                            {
                                <blockquote>
                                    You must be a <em>@Html.DisplayFor(m => m.RoleApproveButtons)</em> to approve and unapprove bills.
                                </blockquote>
                            }
                        </div>
                    </div>
                }
                <ul class="list-group" id="billGroup" data-approve-url="@Url.Action(MVC.Bills.ApproveBill())" data-approve-paramname="@MVC.Bills.ApproveBillParams.billId">
                    <li class="list-group-item list-group-item-info">
                        @Html.Partial(MVC.Shared.Views._billHeaderPartial)
                    </li>
                    @for (var i = 0; i < Model.Bills.Count; ++i)
                    {
                        <li class="list-group-item">
                            @Html.Partial(MVC.Shared.Views._billPartial, Model.Bills[i])
                        </li>
                    }
                </ul>
                <br />
            </form>
        }
        else
        {

            <span style="color:red"><i>No Bill Available</i></span>

        }

    </div>







</div>