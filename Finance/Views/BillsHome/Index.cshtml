@model PhpaAll.Bills.BillHomeIndexViewModel
@{
    ViewBag.Title = "Index";
}
<h2>Index</h2>
<p>
    A bill is an invoice sent by a contractor to PHPA. Approving authority authorizes its payment and then a voucher can be created for it.
</p>


<div class="row">
    <div class="col-md-4">
        <div class="well">
            <h2>Data Entry</h2>
            <ul class="list-group">
                <li class="list-group-item"><a href="@Url.Action(MVC.ManageBills.Create())">Create new Bill</a></li>
                <li class="list-group-item"><a href="@Url.Action(MVC.Bills.RecentBills())">Recently Entered</a></li>
            </ul>
        </div>
    </div>
    <div class="col-md-4">
        <div class="well">
            <h2>Manage</h2>
            <ul class="list-group">
                <li class="list-group-item">
                    <a href="@Url.Action(MVC.Bills.RecentBills().AddRouteValues(new RouteValueDictionary
                        {
                            {MVC.Bills.RecentBillsParams.approved, false},
                            {MVC.Bills.RecentBillsParams.paid, false}
                        }))">Approve for Payment</a>
                </li>
            </ul>
        </div>
    </div>
    <div class="col-md-4">
        <div class="well">
            <h2>Plan and Analyze</h2>
            <ul class="list-group">
                <li class="list-group-item"><a href="@Url.Action(MVC.Bills.OutstandingBills())">Outstanding and Overdue Bills</a></li>
                <li class="list-group-item"><a href="#">Fund Requirements</a></li>
            </ul>
        </div>
    </div>
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>
                Station
            </th>
            <th style="text-align:right">
                Funds Available
            </th>
            @for (var i = 0; i < Model.AllMonths.Count; ++i)
            {
                <th style="white-space:nowrap; text-align:right">
                    @if (i == 0)
                    {
                        @:&le;
                    }
                    else if (i == Model.AllMonths.Count - 1)
                    {
                        @:&ge;
                    }
                    @string.Format("{0:MMM yyyy}", Model.AllMonths[i])
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var i = 0; i < Model.Stations.Count; ++i)
        {
            <tr>
                <td style="font-weight:bold">
                    @Html.DisplayFor(m => m.Stations[i].StationName)
                </td>
                <td style="text-align:right" class="text-primary">
                    @Html.DisplayFor(m => m.Stations[i].FundsAvailable)
                </td>
                @for (var j = 0; j < Model.AllMonths.Count; ++j)
                {
                    <td style="text-align:right">
                        @if (Model.Stations[i].AmountsByMonth.ContainsKey(Model.AllMonths[j]))
                        {
                            <span>
                                @string.Format("{0:C}", Model.Stations[i].AmountsByMonth[Model.AllMonths[j]])
                            </span>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<pre>
Main features of the Bill Management module include:
•	Top management will be able to see outstanding bills by contractor, division, station or any combination thereof.
•	Estimate future fund requirements based on the entered bills. This will improve cash flow planning.
•	Scanned image of the bill will be captured for future reference.
•	Authorized managers will have the capability to approve, reject or delay payment of the bill.
•	Full audit trail of the approval process will be visible.
•	Capability to search for any bill based on multiple criteria.
•	Capability to enter future bills. This will help in planning future expenses.
•	Will help in ensuring that bills are paid by their due date.
•	Capability to view overdue bills
</pre>